
Lab 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000230  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08000468  08000468  00001468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .fini_array   00000004  0800046c  0800046c  0000146c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .bss          0000001c  20000000  08000470  00002000  2**2
                  ALLOC
  5 ._user_heap_stack 00000604  2000001c  08000470  0000201c  2**0
                  ALLOC
  6 .ARM.attributes 00000036  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY
  7 .debug_info   00000a90  00000000  00000000  000014a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 0000020c  00000000  00000000  00001f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000080  00000000  00000000  00002148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_rnglists 00000052  00000000  00000000  000021c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  000265ba  00000000  00000000  0000221a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00000d1b  00000000  00000000  000287d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000e293b  00000000  00000000  000294ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .comment      00000086  00000000  00000000  0010be2a  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00000104  00000000  00000000  0010beb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 0000006f  00000000  00000000  0010bfb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000000 	.word	0x20000000
 8000254:	00000000 	.word	0x00000000
 8000258:	08000450 	.word	0x08000450

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000004 	.word	0x20000004
 8000274:	08000450 	.word	0x08000450

08000278 <reverseBits>:
// (10010) 1110 | 0 = 1110
// (1001) 11100 | 1 = 11101
// (100) 111000 | 0 = 111010
// (10) 1110000 | 0 = 1110100
// (1) 11100000 | 1 = 11101001
unsigned int reverseBits(unsigned int num) {
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
    unsigned int result = 0;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
    while (num) {
 8000284:	e00b      	b.n	800029e <reverseBits+0x26>
        result <<= 1;
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	005b      	lsls	r3, r3, #1
 800028a:	60fb      	str	r3, [r7, #12]
        result |= (num & 1);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f003 0301 	and.w	r3, r3, #1
 8000292:	68fa      	ldr	r2, [r7, #12]
 8000294:	4313      	orrs	r3, r2
 8000296:	60fb      	str	r3, [r7, #12]
        num >>= 1;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	085b      	lsrs	r3, r3, #1
 800029c:	607b      	str	r3, [r7, #4]
    while (num) {
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d1f0      	bne.n	8000286 <reverseBits+0xe>
    }
    return result;
 80002a4:	68fb      	ldr	r3, [r7, #12]
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	3714      	adds	r7, #20
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr

080002b2 <countSetBits>:

// While number != 0
// num AND 00000001
// Shift right num to get rid of the tested bit
int countSetBits(int num) {
 80002b2:	b480      	push	{r7}
 80002b4:	b085      	sub	sp, #20
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
    int count = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
    while (num) {
 80002be:	e008      	b.n	80002d2 <countSetBits+0x20>
        count += num & 1;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f003 0301 	and.w	r3, r3, #1
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	4413      	add	r3, r2
 80002ca:	60fb      	str	r3, [r7, #12]
        num >>= 1;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	105b      	asrs	r3, r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
    while (num) {
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d1f3      	bne.n	80002c0 <countSetBits+0xe>
    }
    return count;
 80002d8:	68fb      	ldr	r3, [r7, #12]
}
 80002da:	4618      	mov	r0, r3
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr

080002e6 <main>:

int main(void)
{
 80002e6:	b590      	push	{r4, r7, lr}
 80002e8:	b083      	sub	sp, #12
 80002ea:	af00      	add	r7, sp, #0
    while (1) {
        register int counter = 0;
 80002ec:	2400      	movs	r4, #0
        counter++;
 80002ee:	3401      	adds	r4, #1
        counter++;
 80002f0:	3401      	adds	r4, #1
        counter++;
 80002f2:	3401      	adds	r4, #1
        counter++;
 80002f4:	3401      	adds	r4, #1
        counter++;
 80002f6:	3401      	adds	r4, #1
        counter++;
 80002f8:	3401      	adds	r4, #1
        counter++;
 80002fa:	3401      	adds	r4, #1
        counter--;
 80002fc:	3c01      	subs	r4, #1
        counter++;
 80002fe:	3401      	adds	r4, #1
        counter++;
 8000300:	3401      	adds	r4, #1
        counter++;
 8000302:	3401      	adds	r4, #1
        counter++;
 8000304:	3401      	adds	r4, #1
        counter++;
 8000306:	3401      	adds	r4, #1
        counter++;
 8000308:	3401      	adds	r4, #1

        int use_counter = counter;
 800030a:	607c      	str	r4, [r7, #4]

        register int counter2 = 0;
 800030c:	2400      	movs	r4, #0
        while (counter2 < 10) {
 800030e:	e000      	b.n	8000312 <main+0x2c>
            counter2++;
 8000310:	3401      	adds	r4, #1
        while (counter2 < 10) {
 8000312:	2c09      	cmp	r4, #9
 8000314:	ddfc      	ble.n	8000310 <main+0x2a>
        }

        unsigned int num = 0xF3;
 8000316:	23f3      	movs	r3, #243	@ 0xf3
 8000318:	603b      	str	r3, [r7, #0]

        // Set 2nd bit
        num |= (1 << 2);
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	f043 0304 	orr.w	r3, r3, #4
 8000320:	603b      	str	r3, [r7, #0]

        // Clear 5th bit
        num &= ~(1 << 5);
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	f023 0320 	bic.w	r3, r3, #32
 8000328:	603b      	str	r3, [r7, #0]

        // Toggle 6th bit
        num ^= (1 << 6);
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 8000330:	603b      	str	r3, [r7, #0]

        // num should be now:
        // 0x97 (151)
        // 1001 0111

        countSetBits(num);
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ffbc 	bl	80002b2 <countSetBits>
        reverseBits(num);
 800033a:	6838      	ldr	r0, [r7, #0]
 800033c:	f7ff ff9c 	bl	8000278 <reverseBits>
    while (1) {
 8000340:	e7d4      	b.n	80002ec <main+0x6>
	...

08000344 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000348:	4b18      	ldr	r3, [pc, #96]	@ (80003ac <SystemInit+0x68>)
 800034a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800034e:	4a17      	ldr	r2, [pc, #92]	@ (80003ac <SystemInit+0x68>)
 8000350:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000354:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000358:	4b15      	ldr	r3, [pc, #84]	@ (80003b0 <SystemInit+0x6c>)
 800035a:	2201      	movs	r2, #1
 800035c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800035e:	4b14      	ldr	r3, [pc, #80]	@ (80003b0 <SystemInit+0x6c>)
 8000360:	2200      	movs	r2, #0
 8000362:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000364:	4b12      	ldr	r3, [pc, #72]	@ (80003b0 <SystemInit+0x6c>)
 8000366:	2200      	movs	r2, #0
 8000368:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800036a:	4b11      	ldr	r3, [pc, #68]	@ (80003b0 <SystemInit+0x6c>)
 800036c:	2200      	movs	r2, #0
 800036e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000370:	4b0f      	ldr	r3, [pc, #60]	@ (80003b0 <SystemInit+0x6c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a0e      	ldr	r2, [pc, #56]	@ (80003b0 <SystemInit+0x6c>)
 8000376:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800037a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800037e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000380:	4b0b      	ldr	r3, [pc, #44]	@ (80003b0 <SystemInit+0x6c>)
 8000382:	2200      	movs	r2, #0
 8000384:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000386:	4b0a      	ldr	r3, [pc, #40]	@ (80003b0 <SystemInit+0x6c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a09      	ldr	r2, [pc, #36]	@ (80003b0 <SystemInit+0x6c>)
 800038c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000390:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000392:	4b07      	ldr	r3, [pc, #28]	@ (80003b0 <SystemInit+0x6c>)
 8000394:	2200      	movs	r2, #0
 8000396:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000398:	4b04      	ldr	r3, [pc, #16]	@ (80003ac <SystemInit+0x68>)
 800039a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800039e:	609a      	str	r2, [r3, #8]
  #endif
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	e000ed00 	.word	0xe000ed00
 80003b0:	46020c00 	.word	0x46020c00

080003b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80003b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003ec <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b8:	f7ff ffc4 	bl	8000344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80003bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80003be:	e003      	b.n	80003c8 <LoopCopyDataInit>

080003c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80003c0:	4b0b      	ldr	r3, [pc, #44]	@ (80003f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80003c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80003c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80003c6:	3104      	adds	r1, #4

080003c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003c8:	480a      	ldr	r0, [pc, #40]	@ (80003f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80003ca:	4b0b      	ldr	r3, [pc, #44]	@ (80003f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80003cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80003ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80003d0:	d3f6      	bcc.n	80003c0 <CopyDataInit>
	ldr	r2, =_sbss
 80003d2:	4a0a      	ldr	r2, [pc, #40]	@ (80003fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80003d4:	e002      	b.n	80003dc <LoopFillZerobss>

080003d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80003d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80003d8:	f842 3b04 	str.w	r3, [r2], #4

080003dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80003dc:	4b08      	ldr	r3, [pc, #32]	@ (8000400 <LoopForever+0x16>)
	cmp	r2, r3
 80003de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80003e0:	d3f9      	bcc.n	80003d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003e2:	f000 f811 	bl	8000408 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003e6:	f7ff ff7e 	bl	80002e6 <main>

080003ea <LoopForever>:

LoopForever:
    b LoopForever
 80003ea:	e7fe      	b.n	80003ea <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80003ec:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80003f0:	08000470 	.word	0x08000470
	ldr	r0, =_sdata
 80003f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80003f8:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 80003fc:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8000400:	2000001c 	.word	0x2000001c

08000404 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000404:	e7fe      	b.n	8000404 <ADC1_IRQHandler>
	...

08000408 <__libc_init_array>:
 8000408:	b570      	push	{r4, r5, r6, lr}
 800040a:	4d0d      	ldr	r5, [pc, #52]	@ (8000440 <__libc_init_array+0x38>)
 800040c:	2600      	movs	r6, #0
 800040e:	4c0d      	ldr	r4, [pc, #52]	@ (8000444 <__libc_init_array+0x3c>)
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	10a4      	asrs	r4, r4, #2
 8000414:	42a6      	cmp	r6, r4
 8000416:	d109      	bne.n	800042c <__libc_init_array+0x24>
 8000418:	4d0b      	ldr	r5, [pc, #44]	@ (8000448 <__libc_init_array+0x40>)
 800041a:	2600      	movs	r6, #0
 800041c:	4c0b      	ldr	r4, [pc, #44]	@ (800044c <__libc_init_array+0x44>)
 800041e:	f000 f817 	bl	8000450 <_init>
 8000422:	1b64      	subs	r4, r4, r5
 8000424:	10a4      	asrs	r4, r4, #2
 8000426:	42a6      	cmp	r6, r4
 8000428:	d105      	bne.n	8000436 <__libc_init_array+0x2e>
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000430:	3601      	adds	r6, #1
 8000432:	4798      	blx	r3
 8000434:	e7ee      	b.n	8000414 <__libc_init_array+0xc>
 8000436:	f855 3b04 	ldr.w	r3, [r5], #4
 800043a:	3601      	adds	r6, #1
 800043c:	4798      	blx	r3
 800043e:	e7f2      	b.n	8000426 <__libc_init_array+0x1e>
 8000440:	08000468 	.word	0x08000468
 8000444:	08000468 	.word	0x08000468
 8000448:	08000468 	.word	0x08000468
 800044c:	0800046c 	.word	0x0800046c

08000450 <_init>:
 8000450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000452:	bf00      	nop
 8000454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000456:	bc08      	pop	{r3}
 8000458:	469e      	mov	lr, r3
 800045a:	4770      	bx	lr

0800045c <_fini>:
 800045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045e:	bf00      	nop
 8000460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000462:	bc08      	pop	{r3}
 8000464:	469e      	mov	lr, r3
 8000466:	4770      	bx	lr
