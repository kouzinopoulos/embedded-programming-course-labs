
myProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000994  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08000bcc  08000bcc  00001bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .fini_array   00000004  08000bd0  08000bd0  00001bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .bss          00000020  20000000  08000bd4  00002000  2**2
                  ALLOC
  5 ._user_heap_stack 00000600  20000020  08000bd4  00002020  2**0
                  ALLOC
  6 .ARM.attributes 00000036  00000000  00000000  00001bd4  2**0
                  CONTENTS, READONLY
  7 .debug_info   00001f5a  00000000  00000000  00001c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000005e0  00000000  00000000  00003b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000108  00000000  00000000  00004148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_rnglists 000000ba  00000000  00000000  00004250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  0002968b  00000000  00000000  0000430a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00001b01  00000000  00000000  0002d995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000f4180  00000000  00000000  0002f496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .comment      00000043  00000000  00000000  00123616  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00000308  00000000  00000000  0012365c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 00000068  00000000  00000000  00123964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000000 	.word	0x20000000
 8000254:	00000000 	.word	0x00000000
 8000258:	08000bb4 	.word	0x08000bb4

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000004 	.word	0x20000004
 8000274:	08000bb4 	.word	0x08000bb4

08000278 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_GTZC2
  *         @arg @ref LL_AHB3_GRP1_PERIPH_SRAM4
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000280:	4b0a      	ldr	r3, [pc, #40]	@ (80002ac <LL_AHB3_GRP1_EnableClock+0x34>)
 8000282:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8000286:	4909      	ldr	r1, [pc, #36]	@ (80002ac <LL_AHB3_GRP1_EnableClock+0x34>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4313      	orrs	r3, r2
 800028c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000290:	4b06      	ldr	r3, [pc, #24]	@ (80002ac <LL_AHB3_GRP1_EnableClock+0x34>)
 8000292:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	4013      	ands	r3, r2
 800029a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800029c:	68fb      	ldr	r3, [r7, #12]
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	46020c00 	.word	0x46020c00

080002b0 <LL_RCC_MSI_SetCalibTrimming>:
  *         @arg @ref LL_RCC_MSI_OSCILLATOR_2
  *         @arg @ref LL_RCC_MSI_OSCILLATOR_3
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value, uint32_t Oscillator)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->ICSCR2, (RCC_ICSCR2_MSITRIM0  >> Oscillator), Value << (RCC_ICSCR2_MSITRIM0_Pos - Oscillator));
 80002ba:	4b0c      	ldr	r3, [pc, #48]	@ (80002ec <LL_RCC_MSI_SetCalibTrimming+0x3c>)
 80002bc:	68da      	ldr	r2, [r3, #12]
 80002be:	f44f 2178 	mov.w	r1, #1015808	@ 0xf8000
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	fa21 f303 	lsr.w	r3, r1, r3
 80002c8:	43db      	mvns	r3, r3
 80002ca:	401a      	ands	r2, r3
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	f1c3 030f 	rsb	r3, r3, #15
 80002d2:	6879      	ldr	r1, [r7, #4]
 80002d4:	fa01 f303 	lsl.w	r3, r1, r3
 80002d8:	4904      	ldr	r1, [pc, #16]	@ (80002ec <LL_RCC_MSI_SetCalibTrimming+0x3c>)
 80002da:	4313      	orrs	r3, r2
 80002dc:	60cb      	str	r3, [r1, #12]
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	46020c00 	.word	0x46020c00

080002f0 <simplified_MSI_PLL_160M>:
    RCC->CR &= ~(RCC_CR_HSION);
    while ((RCC->CR & RCC_CR_HSIRDY)) {
    };
}

void simplified_MSI_PLL_160M() {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
    // Set 4 waiting states for FLASH (?)
    FLASH->ACR &= ~(FLASH_ACR_LATENCY);
 80002f6:	4b7c      	ldr	r3, [pc, #496]	@ (80004e8 <simplified_MSI_PLL_160M+0x1f8>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a7b      	ldr	r2, [pc, #492]	@ (80004e8 <simplified_MSI_PLL_160M+0x1f8>)
 80002fc:	f023 030f 	bic.w	r3, r3, #15
 8000300:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (FLASH_ACR_LATENCY_4WS);
 8000302:	4b79      	ldr	r3, [pc, #484]	@ (80004e8 <simplified_MSI_PLL_160M+0x1f8>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a78      	ldr	r2, [pc, #480]	@ (80004e8 <simplified_MSI_PLL_160M+0x1f8>)
 8000308:	f043 0304 	orr.w	r3, r3, #4
 800030c:	6013      	str	r3, [r2, #0]
    while (!(FLASH->ACR & FLASH_ACR_LATENCY_4WS)) {
 800030e:	bf00      	nop
 8000310:	4b75      	ldr	r3, [pc, #468]	@ (80004e8 <simplified_MSI_PLL_160M+0x1f8>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f003 0304 	and.w	r3, r3, #4
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0f9      	beq.n	8000310 <simplified_MSI_PLL_160M+0x20>
    // Voltage scaling range selection
    // By default the system works in range 3: medium-low power range
    // It provides a typical output voltage at 1.0 V. The system clock frequency can be up to 55 MHz.
    // However, we want to go to 160MHz... and thus to range 1: high performance
    // It provides a typical output voltage at 1.2 V. It is used when the system clock frequency is up to 160 MHz
    PWR->VOSR &= ~(PWR_VOSR_VOS);
 800031c:	4b73      	ldr	r3, [pc, #460]	@ (80004ec <simplified_MSI_PLL_160M+0x1fc>)
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	4a72      	ldr	r2, [pc, #456]	@ (80004ec <simplified_MSI_PLL_160M+0x1fc>)
 8000322:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000326:	60d3      	str	r3, [r2, #12]
    PWR->VOSR |= (PWR_VOSR_VOS);
 8000328:	4b70      	ldr	r3, [pc, #448]	@ (80004ec <simplified_MSI_PLL_160M+0x1fc>)
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	4a6f      	ldr	r2, [pc, #444]	@ (80004ec <simplified_MSI_PLL_160M+0x1fc>)
 800032e:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8000332:	60d3      	str	r3, [r2, #12]
    while ((((PWR->VOSR & PWR_VOSR_VOSRDY) == (PWR_VOSR_VOSRDY)) ? 1UL : 0UL)
 8000334:	bf00      	nop
 8000336:	4b6d      	ldr	r3, [pc, #436]	@ (80004ec <simplified_MSI_PLL_160M+0x1fc>)
 8000338:	68db      	ldr	r3, [r3, #12]
 800033a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
            == 0) {
 800033e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000342:	d1f8      	bne.n	8000336 <simplified_MSI_PLL_160M+0x46>
    };

    // Enable MSIS
    RCC->CR |= (RCC_CR_MSISON);
 8000344:	4b6a      	ldr	r3, [pc, #424]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a69      	ldr	r2, [pc, #420]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 800034a:	f043 0301 	orr.w	r3, r3, #1
 800034e:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_MSISRDY)) {
 8000350:	bf00      	nop
 8000352:	4b67      	ldr	r3, [pc, #412]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f003 0304 	and.w	r3, r3, #4
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0f9      	beq.n	8000352 <simplified_MSI_PLL_160M+0x62>
    };

    // Enable MSIS range selection
    RCC->ICSCR1 |= (RCC_ICSCR1_MSIRGSEL);
 800035e:	4b64      	ldr	r3, [pc, #400]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 8000360:	689b      	ldr	r3, [r3, #8]
 8000362:	4a63      	ldr	r2, [pc, #396]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 8000364:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000368:	6093      	str	r3, [r2, #8]

    // Set MSIS frequency range
    // 0100: range 4 around 4 MHz (reset value)
    RCC->ICSCR1 &= ~(RCC_ICSCR1_MSISRANGE);
 800036a:	4b61      	ldr	r3, [pc, #388]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	4a60      	ldr	r2, [pc, #384]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 8000370:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000374:	6093      	str	r3, [r2, #8]
    RCC->ICSCR1 |= (0x4U << RCC_ICSCR1_MSISRANGE_Pos);
 8000376:	4b5e      	ldr	r3, [pc, #376]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	4a5d      	ldr	r2, [pc, #372]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 800037c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000380:	6093      	str	r3, [r2, #8]

    LL_RCC_MSI_SetCalibTrimming(16, LL_RCC_MSI_OSCILLATOR_1);
 8000382:	2105      	movs	r1, #5
 8000384:	2010      	movs	r0, #16
 8000386:	f7ff ff93 	bl	80002b0 <LL_RCC_MSI_SetCalibTrimming>

    // // Set M, N and R bits of PLL
    uint32_t PLLM = 1;
 800038a:	2301      	movs	r3, #1
 800038c:	60fb      	str	r3, [r7, #12]
    uint32_t PLLN = 80;
 800038e:	2350      	movs	r3, #80	@ 0x50
 8000390:	60bb      	str	r3, [r7, #8]
    uint32_t PLLR = 2;
 8000392:	2302      	movs	r3, #2
 8000394:	607b      	str	r3, [r7, #4]
    RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1M);
 8000396:	4b56      	ldr	r3, [pc, #344]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 8000398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800039a:	4a55      	ldr	r2, [pc, #340]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 800039c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80003a0:	f023 0303 	bic.w	r3, r3, #3
 80003a4:	6293      	str	r3, [r2, #40]	@ 0x28
    RCC->PLL1CFGR |= (RCC_PLL1CFGR_PLL1SRC_0
 80003a6:	4b52      	ldr	r3, [pc, #328]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 80003a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
            | ((PLLM - 1UL) << RCC_PLL1CFGR_PLL1M_Pos));
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	3b01      	subs	r3, #1
 80003ae:	021b      	lsls	r3, r3, #8
    RCC->PLL1CFGR |= (RCC_PLL1CFGR_PLL1SRC_0
 80003b0:	4313      	orrs	r3, r2
 80003b2:	4a4f      	ldr	r2, [pc, #316]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6293      	str	r3, [r2, #40]	@ 0x28
    RCC->PLL1DIVR &= ~(RCC_PLL1DIVR_PLL1N | RCC_PLL1DIVR_PLL1R);
 80003ba:	4b4d      	ldr	r3, [pc, #308]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 80003bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003be:	494c      	ldr	r1, [pc, #304]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 80003c0:	4b4c      	ldr	r3, [pc, #304]	@ (80004f4 <simplified_MSI_PLL_160M+0x204>)
 80003c2:	4013      	ands	r3, r2
 80003c4:	634b      	str	r3, [r1, #52]	@ 0x34
    RCC->PLL1DIVR |= ((PLLN - 1UL) << RCC_PLL1DIVR_PLL1N_Pos)
 80003c6:	4b4a      	ldr	r3, [pc, #296]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 80003c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	1e59      	subs	r1, r3, #1
            | ((PLLR - 1UL) << RCC_PLL1DIVR_PLL1R_Pos);
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3b01      	subs	r3, #1
 80003d2:	061b      	lsls	r3, r3, #24
 80003d4:	430b      	orrs	r3, r1
    RCC->PLL1DIVR |= ((PLLN - 1UL) << RCC_PLL1DIVR_PLL1N_Pos)
 80003d6:	4946      	ldr	r1, [pc, #280]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 80003d8:	4313      	orrs	r3, r2
 80003da:	634b      	str	r3, [r1, #52]	@ 0x34

    // Enable the pll1_r_ck output of the PLL1
    RCC->PLL1CFGR |= RCC_PLL1CFGR_PLL1REN;
 80003dc:	4b44      	ldr	r3, [pc, #272]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 80003de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003e0:	4a43      	ldr	r2, [pc, #268]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 80003e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003e6:	6293      	str	r3, [r2, #40]	@ 0x28

    // This bit must be set in range 1 and range 2 before increasing the system clock frequency above 55 MHz
    PWR->VOSR &= ~(PWR_VOSR_BOOSTEN);
 80003e8:	4b40      	ldr	r3, [pc, #256]	@ (80004ec <simplified_MSI_PLL_160M+0x1fc>)
 80003ea:	68db      	ldr	r3, [r3, #12]
 80003ec:	4a3f      	ldr	r2, [pc, #252]	@ (80004ec <simplified_MSI_PLL_160M+0x1fc>)
 80003ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80003f2:	60d3      	str	r3, [r2, #12]
    PWR->VOSR |= (PWR_VOSR_BOOSTEN);
 80003f4:	4b3d      	ldr	r3, [pc, #244]	@ (80004ec <simplified_MSI_PLL_160M+0x1fc>)
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	4a3c      	ldr	r2, [pc, #240]	@ (80004ec <simplified_MSI_PLL_160M+0x1fc>)
 80003fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003fe:	60d3      	str	r3, [r2, #12]

    while ((((PWR->VOSR & PWR_VOSR_BOOSTRDY) == (PWR_VOSR_BOOSTRDY)) ? 1UL : 0UL)
 8000400:	bf00      	nop
 8000402:	4b3a      	ldr	r3, [pc, #232]	@ (80004ec <simplified_MSI_PLL_160M+0x1fc>)
 8000404:	68db      	ldr	r3, [r3, #12]
 8000406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
            == 0) {
 800040a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800040e:	d1f8      	bne.n	8000402 <simplified_MSI_PLL_160M+0x112>
    };

    // Select the proper reference (input) frequency range used for PLL1
    // 00-01-10: PLL1 input (ref1_ck) clock range frequency between 4 and 8 MHz
    RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1RGE);
 8000410:	4b37      	ldr	r3, [pc, #220]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 8000412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000414:	4a36      	ldr	r2, [pc, #216]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 8000416:	f023 030c 	bic.w	r3, r3, #12
 800041a:	6293      	str	r3, [r2, #40]	@ 0x28
    RCC->PLL1CFGR |= (0x00000000U);
 800041c:	4b34      	ldr	r3, [pc, #208]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 800041e:	4a34      	ldr	r2, [pc, #208]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 8000420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000422:	6293      	str	r3, [r2, #40]	@ 0x28

    // Enable PLL1
    RCC->CR |= (RCC_CR_PLL1ON);
 8000424:	4b32      	ldr	r3, [pc, #200]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a31      	ldr	r2, [pc, #196]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 800042a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800042e:	6013      	str	r3, [r2, #0]
    // Wait until PLL1 is ready
    while ((((RCC->CR & RCC_CR_PLL1RDY) == RCC_CR_PLL1RDY) ? 1UL : 0UL) != 1) {
 8000430:	bf00      	nop
 8000432:	4b2f      	ldr	r3, [pc, #188]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800043a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800043e:	d1f8      	bne.n	8000432 <simplified_MSI_PLL_160M+0x142>
    }

    // Intermediate AHB prescaler 2 when target frequency clock is higher than 80 MHz
    RCC->CFGR2 &= ~(RCC_CFGR2_HPRE);
 8000440:	4b2b      	ldr	r3, [pc, #172]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 8000442:	6a1b      	ldr	r3, [r3, #32]
 8000444:	4a2a      	ldr	r2, [pc, #168]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 8000446:	f023 030f 	bic.w	r3, r3, #15
 800044a:	6213      	str	r3, [r2, #32]
    RCC->CFGR2 |= (RCC_CFGR2_HPRE_3);
 800044c:	4b28      	ldr	r3, [pc, #160]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 800044e:	6a1b      	ldr	r3, [r3, #32]
 8000450:	4a27      	ldr	r2, [pc, #156]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 8000452:	f043 0308 	orr.w	r3, r3, #8
 8000456:	6213      	str	r3, [r2, #32]

    // Set system clock source to PLL1
    // 11: PLL pll1_r_ck selected as system clock
    RCC->CFGR1 &= ~(RCC_CFGR1_SW);
 8000458:	4b25      	ldr	r3, [pc, #148]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 800045a:	69db      	ldr	r3, [r3, #28]
 800045c:	4a24      	ldr	r2, [pc, #144]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 800045e:	f023 0303 	bic.w	r3, r3, #3
 8000462:	61d3      	str	r3, [r2, #28]
    RCC->CFGR1 |= (RCC_CFGR1_SW_1 | RCC_CFGR1_SW_0);
 8000464:	4b22      	ldr	r3, [pc, #136]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 8000466:	69db      	ldr	r3, [r3, #28]
 8000468:	4a21      	ldr	r2, [pc, #132]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 800046a:	f043 0303 	orr.w	r3, r3, #3
 800046e:	61d3      	str	r3, [r2, #28]
    // Wait until system clock is ready
    while (!(RCC->CFGR1 & (RCC_CFGR1_SW_1 | RCC_CFGR1_SW_0))) {
 8000470:	bf00      	nop
 8000472:	4b1f      	ldr	r3, [pc, #124]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f003 0303 	and.w	r3, r3, #3
 800047a:	2b00      	cmp	r3, #0
 800047c:	d0f9      	beq.n	8000472 <simplified_MSI_PLL_160M+0x182>
    };

    // Insure 1us transition state at intermediate medium speed clock
    for (__IO uint32_t i = (160 >> 1); i != 0; i--);
 800047e:	2350      	movs	r3, #80	@ 0x50
 8000480:	603b      	str	r3, [r7, #0]
 8000482:	e002      	b.n	800048a <simplified_MSI_PLL_160M+0x19a>
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	3b01      	subs	r3, #1
 8000488:	603b      	str	r3, [r7, #0]
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d1f9      	bne.n	8000484 <simplified_MSI_PLL_160M+0x194>

    // Set AHB prescaler (SYSCLK not divided)
    RCC->CFGR2 &= ~(RCC_CFGR2_HPRE);
 8000490:	4b17      	ldr	r3, [pc, #92]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 8000492:	6a1b      	ldr	r3, [r3, #32]
 8000494:	4a16      	ldr	r2, [pc, #88]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 8000496:	f023 030f 	bic.w	r3, r3, #15
 800049a:	6213      	str	r3, [r2, #32]
    RCC->CFGR2 |= (0x00000000U);
 800049c:	4b14      	ldr	r3, [pc, #80]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 800049e:	4a14      	ldr	r2, [pc, #80]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 80004a0:	6a1b      	ldr	r3, [r3, #32]
 80004a2:	6213      	str	r3, [r2, #32]

    // Set APB1 prescaler (SYSCLK not divided)
    RCC->CFGR2 &= ~(RCC_CFGR2_PPRE1);
 80004a4:	4b12      	ldr	r3, [pc, #72]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 80004a6:	6a1b      	ldr	r3, [r3, #32]
 80004a8:	4a11      	ldr	r2, [pc, #68]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 80004aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80004ae:	6213      	str	r3, [r2, #32]
    RCC->CFGR2 |= (0x00000000U);
 80004b0:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 80004b2:	4a0f      	ldr	r2, [pc, #60]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 80004b4:	6a1b      	ldr	r3, [r3, #32]
 80004b6:	6213      	str	r3, [r2, #32]

    // Set APB2 prescaler (SYSCLK not divided)
    RCC->CFGR2 &= ~(RCC_CFGR2_PPRE2);
 80004b8:	4b0d      	ldr	r3, [pc, #52]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 80004ba:	6a1b      	ldr	r3, [r3, #32]
 80004bc:	4a0c      	ldr	r2, [pc, #48]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 80004be:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80004c2:	6213      	str	r3, [r2, #32]
    RCC->CFGR2 |= (0x00000000U);
 80004c4:	4b0a      	ldr	r3, [pc, #40]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 80004c6:	4a0a      	ldr	r2, [pc, #40]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 80004c8:	6a1b      	ldr	r3, [r3, #32]
 80004ca:	6213      	str	r3, [r2, #32]

    // Set APB3 prescaler (SYSCLK not divided)
    RCC->CFGR2 &= ~(RCC_CFGR3_PPRE3);
 80004cc:	4b08      	ldr	r3, [pc, #32]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 80004ce:	6a1b      	ldr	r3, [r3, #32]
 80004d0:	4a07      	ldr	r2, [pc, #28]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 80004d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80004d6:	6213      	str	r3, [r2, #32]
    RCC->CFGR2 |= (0x00000000U);
 80004d8:	4b05      	ldr	r3, [pc, #20]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 80004da:	4a05      	ldr	r2, [pc, #20]	@ (80004f0 <simplified_MSI_PLL_160M+0x200>)
 80004dc:	6a1b      	ldr	r3, [r3, #32]
 80004de:	6213      	str	r3, [r2, #32]
}
 80004e0:	bf00      	nop
 80004e2:	3710      	adds	r7, #16
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40022000 	.word	0x40022000
 80004ec:	46020800 	.word	0x46020800
 80004f0:	46020c00 	.word	0x46020c00
 80004f4:	80fffe00 	.word	0x80fffe00

080004f8 <activate_cache>:

    // Check ADC_DR register for the result
     */
}

void activate_cache() {
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
    // This bit allows user to choose ICACHE set-associativity. It can be written by software only
    // when cache is disabled (EN = 0)
    // 0: direct mapped cache (1-way cache)
    // 1: n-way set associative cache (reset value)
    ICACHE->CR &= ~(ICACHE_CR_WAYSEL);
 80004fc:	4b14      	ldr	r3, [pc, #80]	@ (8000550 <activate_cache+0x58>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a13      	ldr	r2, [pc, #76]	@ (8000550 <activate_cache+0x58>)
 8000502:	f023 0304 	bic.w	r3, r3, #4
 8000506:	6013      	str	r3, [r2, #0]
    // Enable hit and miss monitors and reset their value
    ICACHE->CR |= (ICACHE_CR_HITMEN);
 8000508:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <activate_cache+0x58>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a10      	ldr	r2, [pc, #64]	@ (8000550 <activate_cache+0x58>)
 800050e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000512:	6013      	str	r3, [r2, #0]
    ICACHE->CR |= (ICACHE_CR_MISSMEN);
 8000514:	4b0e      	ldr	r3, [pc, #56]	@ (8000550 <activate_cache+0x58>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0d      	ldr	r2, [pc, #52]	@ (8000550 <activate_cache+0x58>)
 800051a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800051e:	6013      	str	r3, [r2, #0]
    ICACHE->CR |= (ICACHE_CR_HITMRST);
 8000520:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <activate_cache+0x58>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a0a      	ldr	r2, [pc, #40]	@ (8000550 <activate_cache+0x58>)
 8000526:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800052a:	6013      	str	r3, [r2, #0]
    ICACHE->CR |= (ICACHE_CR_MISSMRST);
 800052c:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <activate_cache+0x58>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a07      	ldr	r2, [pc, #28]	@ (8000550 <activate_cache+0x58>)
 8000532:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000536:	6013      	str	r3, [r2, #0]

    // 0: cache disabled
    // 1: cache enabled
    ICACHE->CR |= (ICACHE_CR_EN);
 8000538:	4b05      	ldr	r3, [pc, #20]	@ (8000550 <activate_cache+0x58>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a04      	ldr	r2, [pc, #16]	@ (8000550 <activate_cache+0x58>)
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	6013      	str	r3, [r2, #0]

//    uint32_t cache_hit = ICACHE->HMONR;
//    uint32_t cache_miss = ICACHE->MMONR;
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40030400 	.word	0x40030400

08000554 <main>:

int main(void) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	@ 0x28
 8000558:	af00      	add	r7, sp, #0
//	simplified_HSI16();
//	simplified_MSIS_100k();
//	simplified_MSI_PLL_160M();
    LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_PWR);
 800055a:	2004      	movs	r0, #4
 800055c:	f7ff fe8c 	bl	8000278 <LL_AHB3_GRP1_EnableClock>
    simplified_MSI_PLL_160M();
 8000560:	f7ff fec6 	bl	80002f0 <simplified_MSI_PLL_160M>

    activate_cache();
 8000564:	f7ff ffc8 	bl	80004f8 <activate_cache>

//    MX_RTC_Init();
    Configure_RTC();
 8000568:	f000 f9dc 	bl	8000924 <Configure_RTC>
//	HAL_GPIO_TogglePin (GPIOH, GPIO_PIN_6);
//	HAL_Delay (500);
//	HAL_GPIO_TogglePin (GPIOH, GPIO_PIN_7);
//	HAL_Delay (500);
//	register int counter = 0;
        counter++;
 800056c:	4b8a      	ldr	r3, [pc, #552]	@ (8000798 <main+0x244>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	3301      	adds	r3, #1
 8000572:	4a89      	ldr	r2, [pc, #548]	@ (8000798 <main+0x244>)
 8000574:	6013      	str	r3, [r2, #0]
        counter++;
 8000576:	4b88      	ldr	r3, [pc, #544]	@ (8000798 <main+0x244>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	3301      	adds	r3, #1
 800057c:	4a86      	ldr	r2, [pc, #536]	@ (8000798 <main+0x244>)
 800057e:	6013      	str	r3, [r2, #0]
        counter++;
 8000580:	4b85      	ldr	r3, [pc, #532]	@ (8000798 <main+0x244>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	4a84      	ldr	r2, [pc, #528]	@ (8000798 <main+0x244>)
 8000588:	6013      	str	r3, [r2, #0]
        counter++;
 800058a:	4b83      	ldr	r3, [pc, #524]	@ (8000798 <main+0x244>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	3301      	adds	r3, #1
 8000590:	4a81      	ldr	r2, [pc, #516]	@ (8000798 <main+0x244>)
 8000592:	6013      	str	r3, [r2, #0]
        counter++;
 8000594:	4b80      	ldr	r3, [pc, #512]	@ (8000798 <main+0x244>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	3301      	adds	r3, #1
 800059a:	4a7f      	ldr	r2, [pc, #508]	@ (8000798 <main+0x244>)
 800059c:	6013      	str	r3, [r2, #0]
        counter++;
 800059e:	4b7e      	ldr	r3, [pc, #504]	@ (8000798 <main+0x244>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	3301      	adds	r3, #1
 80005a4:	4a7c      	ldr	r2, [pc, #496]	@ (8000798 <main+0x244>)
 80005a6:	6013      	str	r3, [r2, #0]
        counter++;
 80005a8:	4b7b      	ldr	r3, [pc, #492]	@ (8000798 <main+0x244>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	3301      	adds	r3, #1
 80005ae:	4a7a      	ldr	r2, [pc, #488]	@ (8000798 <main+0x244>)
 80005b0:	6013      	str	r3, [r2, #0]
        counter--;
 80005b2:	4b79      	ldr	r3, [pc, #484]	@ (8000798 <main+0x244>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	3b01      	subs	r3, #1
 80005b8:	4a77      	ldr	r2, [pc, #476]	@ (8000798 <main+0x244>)
 80005ba:	6013      	str	r3, [r2, #0]
        counter++;
 80005bc:	4b76      	ldr	r3, [pc, #472]	@ (8000798 <main+0x244>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	3301      	adds	r3, #1
 80005c2:	4a75      	ldr	r2, [pc, #468]	@ (8000798 <main+0x244>)
 80005c4:	6013      	str	r3, [r2, #0]
        counter++;
 80005c6:	4b74      	ldr	r3, [pc, #464]	@ (8000798 <main+0x244>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	4a72      	ldr	r2, [pc, #456]	@ (8000798 <main+0x244>)
 80005ce:	6013      	str	r3, [r2, #0]
        counter++;
 80005d0:	4b71      	ldr	r3, [pc, #452]	@ (8000798 <main+0x244>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a70      	ldr	r2, [pc, #448]	@ (8000798 <main+0x244>)
 80005d8:	6013      	str	r3, [r2, #0]
        counter++;
 80005da:	4b6f      	ldr	r3, [pc, #444]	@ (8000798 <main+0x244>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	4a6d      	ldr	r2, [pc, #436]	@ (8000798 <main+0x244>)
 80005e2:	6013      	str	r3, [r2, #0]
        counter++;
 80005e4:	4b6c      	ldr	r3, [pc, #432]	@ (8000798 <main+0x244>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	4a6b      	ldr	r2, [pc, #428]	@ (8000798 <main+0x244>)
 80005ec:	6013      	str	r3, [r2, #0]
        counter++;
 80005ee:	4b6a      	ldr	r3, [pc, #424]	@ (8000798 <main+0x244>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	4a68      	ldr	r2, [pc, #416]	@ (8000798 <main+0x244>)
 80005f6:	6013      	str	r3, [r2, #0]

        counter = 0;
 80005f8:	4b67      	ldr	r3, [pc, #412]	@ (8000798 <main+0x244>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
        while (counter < 10) {
 80005fe:	e004      	b.n	800060a <main+0xb6>
            counter++;
 8000600:	4b65      	ldr	r3, [pc, #404]	@ (8000798 <main+0x244>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	4a64      	ldr	r2, [pc, #400]	@ (8000798 <main+0x244>)
 8000608:	6013      	str	r3, [r2, #0]
        while (counter < 10) {
 800060a:	4b63      	ldr	r3, [pc, #396]	@ (8000798 <main+0x244>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b09      	cmp	r3, #9
 8000610:	ddf6      	ble.n	8000600 <main+0xac>
        }

        int *p_int;
        p_int = &counter;
 8000612:	4b61      	ldr	r3, [pc, #388]	@ (8000798 <main+0x244>)
 8000614:	61fb      	str	r3, [r7, #28]
        (*p_int) = 0;
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]

        while (*p_int < 10) {
 800061c:	e004      	b.n	8000628 <main+0xd4>
            (*p_int)++;
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	601a      	str	r2, [r3, #0]
        while (*p_int < 10) {
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b09      	cmp	r3, #9
 800062e:	ddf6      	ble.n	800061e <main+0xca>
        }

        p_int = (int*) 0x20000012;
 8000630:	4b5a      	ldr	r3, [pc, #360]	@ (800079c <main+0x248>)
 8000632:	61fb      	str	r3, [r7, #28]
        *p_int = 0xDEADBEEF;
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	4a5a      	ldr	r2, [pc, #360]	@ (80007a0 <main+0x24c>)
 8000638:	601a      	str	r2, [r3, #0]

        unsigned int a = 0x5A5A5A5A;
 800063a:	f04f 335a 	mov.w	r3, #1515870810	@ 0x5a5a5a5a
 800063e:	61bb      	str	r3, [r7, #24]
        unsigned int b = 0xDEADBEEF;
 8000640:	4b57      	ldr	r3, [pc, #348]	@ (80007a0 <main+0x24c>)
 8000642:	617b      	str	r3, [r7, #20]
        unsigned int c;

        c = a | b;
 8000644:	69ba      	ldr	r2, [r7, #24]
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	4313      	orrs	r3, r2
 800064a:	613b      	str	r3, [r7, #16]
        c = a & b;
 800064c:	69ba      	ldr	r2, [r7, #24]
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	4013      	ands	r3, r2
 8000652:	613b      	str	r3, [r7, #16]
        c = a ^ b;
 8000654:	69ba      	ldr	r2, [r7, #24]
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	4053      	eors	r3, r2
 800065a:	613b      	str	r3, [r7, #16]
        c = ~a;
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	43db      	mvns	r3, r3
 8000660:	613b      	str	r3, [r7, #16]
        c = b >> 1;
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	085b      	lsrs	r3, r3, #1
 8000666:	613b      	str	r3, [r7, #16]
        c = b << 3;
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	613b      	str	r3, [r7, #16]

        int x = 1024;
 800066e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000672:	60fb      	str	r3, [r7, #12]
        int y = -1024;
 8000674:	4b4b      	ldr	r3, [pc, #300]	@ (80007a4 <main+0x250>)
 8000676:	60bb      	str	r3, [r7, #8]
        int z;

        z = x >> 3;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	10db      	asrs	r3, r3, #3
 800067c:	607b      	str	r3, [r7, #4]
        z = y >> 3;
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	10db      	asrs	r3, r3, #3
 8000682:	607b      	str	r3, [r7, #4]
            MY_GPIO_MODE_OUTPUT,
            MY_GPIO_MODE_AF,
            MY_GPIO_MODE_ANALOG
        };

        RCC->AHB2ENR1 |= RCC_AHB2ENR1_GPIOHEN;
 8000684:	4b48      	ldr	r3, [pc, #288]	@ (80007a8 <main+0x254>)
 8000686:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800068a:	4a47      	ldr	r2, [pc, #284]	@ (80007a8 <main+0x254>)
 800068c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000690:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
        GPIOH->MODER &= ~(GPIO_MODER_MODE6_Msk); // Reset mode for red LED
 8000694:	4b45      	ldr	r3, [pc, #276]	@ (80007ac <main+0x258>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a44      	ldr	r2, [pc, #272]	@ (80007ac <main+0x258>)
 800069a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800069e:	6013      	str	r3, [r2, #0]
        GPIOH->MODER &= ~(GPIO_MODER_MODE7_Msk); // Reset mode for green LED
 80006a0:	4b42      	ldr	r3, [pc, #264]	@ (80007ac <main+0x258>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a41      	ldr	r2, [pc, #260]	@ (80007ac <main+0x258>)
 80006a6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006aa:	6013      	str	r3, [r2, #0]
        GPIOH->MODER |= (MY_GPIO_MODE_OUTPUT << GPIO_MODER_MODE6_Pos); // Set output mode for red LED
 80006ac:	4b3f      	ldr	r3, [pc, #252]	@ (80007ac <main+0x258>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a3e      	ldr	r2, [pc, #248]	@ (80007ac <main+0x258>)
 80006b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006b6:	6013      	str	r3, [r2, #0]
        GPIOH->MODER |= (MY_GPIO_MODE_OUTPUT << GPIO_MODER_MODE7_Pos); // Set output mode for green LED
 80006b8:	4b3c      	ldr	r3, [pc, #240]	@ (80007ac <main+0x258>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a3b      	ldr	r2, [pc, #236]	@ (80007ac <main+0x258>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006c2:	6013      	str	r3, [r2, #0]
//
//		GPIOH->BSRR = LED_RED_RESET;
//		GPIOH->BSRR = LED_GREEN_RESET;
//	}

        RCC->AHB2ENR1 |= RCC_AHB2ENR1_GPIOCEN;
 80006c4:	4b38      	ldr	r3, [pc, #224]	@ (80007a8 <main+0x254>)
 80006c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ca:	4a37      	ldr	r2, [pc, #220]	@ (80007a8 <main+0x254>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
        GPIOC->MODER &= ~(GPIO_MODER_MODE13_Msk);
 80006d4:	4b36      	ldr	r3, [pc, #216]	@ (80007b0 <main+0x25c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a35      	ldr	r2, [pc, #212]	@ (80007b0 <main+0x25c>)
 80006da:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80006de:	6013      	str	r3, [r2, #0]
        GPIOC->MODER |= (MY_GPIO_MODE_INPUT << GPIO_MODER_MODE13_Pos);
 80006e0:	4b33      	ldr	r3, [pc, #204]	@ (80007b0 <main+0x25c>)
 80006e2:	4a33      	ldr	r2, [pc, #204]	@ (80007b0 <main+0x25c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	6013      	str	r3, [r2, #0]

        // Set RTC time
        time_t now;
        now.hours   = 12;
 80006e8:	230c      	movs	r3, #12
 80006ea:	703b      	strb	r3, [r7, #0]
        now.minutes = 00;
 80006ec:	2300      	movs	r3, #0
 80006ee:	707b      	strb	r3, [r7, #1]
        now.seconds = 00;
 80006f0:	2300      	movs	r3, #0
 80006f2:	70bb      	strb	r3, [r7, #2]
        BSP_RTC_SetTime(&now);
 80006f4:	463b      	mov	r3, r7
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f898 	bl	800082c <BSP_RTC_SetTime>

        now.hours   = 00;
 80006fc:	2300      	movs	r3, #0
 80006fe:	703b      	strb	r3, [r7, #0]

        while (1) {
            BSP_RTC_GetTime(&now);
 8000700:	463b      	mov	r3, r7
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f8da 	bl	80008bc <BSP_RTC_GetTime>
            // Every two seconds of the RTC
            if (now.seconds == 3 || now.seconds == 13 || now.seconds == 23 || now.seconds == 33 || now.seconds == 43 || now.seconds == 53 ) {
 8000708:	78bb      	ldrb	r3, [r7, #2]
 800070a:	2b03      	cmp	r3, #3
 800070c:	d00e      	beq.n	800072c <main+0x1d8>
 800070e:	78bb      	ldrb	r3, [r7, #2]
 8000710:	2b0d      	cmp	r3, #13
 8000712:	d00b      	beq.n	800072c <main+0x1d8>
 8000714:	78bb      	ldrb	r3, [r7, #2]
 8000716:	2b17      	cmp	r3, #23
 8000718:	d008      	beq.n	800072c <main+0x1d8>
 800071a:	78bb      	ldrb	r3, [r7, #2]
 800071c:	2b21      	cmp	r3, #33	@ 0x21
 800071e:	d005      	beq.n	800072c <main+0x1d8>
 8000720:	78bb      	ldrb	r3, [r7, #2]
 8000722:	2b2b      	cmp	r3, #43	@ 0x2b
 8000724:	d002      	beq.n	800072c <main+0x1d8>
 8000726:	78bb      	ldrb	r3, [r7, #2]
 8000728:	2b35      	cmp	r3, #53	@ 0x35
 800072a:	d102      	bne.n	8000732 <main+0x1de>
                GPIOH->BSRR = LED_GREEN_SET;
 800072c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ac <main+0x258>)
 800072e:	2280      	movs	r2, #128	@ 0x80
 8000730:	619a      	str	r2, [r3, #24]
            }

            if (now.seconds == 7 || now.seconds == 17 || now.seconds == 27 || now.seconds == 37 || now.seconds == 47 || now.seconds == 57 ) {
 8000732:	78bb      	ldrb	r3, [r7, #2]
 8000734:	2b07      	cmp	r3, #7
 8000736:	d00e      	beq.n	8000756 <main+0x202>
 8000738:	78bb      	ldrb	r3, [r7, #2]
 800073a:	2b11      	cmp	r3, #17
 800073c:	d00b      	beq.n	8000756 <main+0x202>
 800073e:	78bb      	ldrb	r3, [r7, #2]
 8000740:	2b1b      	cmp	r3, #27
 8000742:	d008      	beq.n	8000756 <main+0x202>
 8000744:	78bb      	ldrb	r3, [r7, #2]
 8000746:	2b25      	cmp	r3, #37	@ 0x25
 8000748:	d005      	beq.n	8000756 <main+0x202>
 800074a:	78bb      	ldrb	r3, [r7, #2]
 800074c:	2b2f      	cmp	r3, #47	@ 0x2f
 800074e:	d002      	beq.n	8000756 <main+0x202>
 8000750:	78bb      	ldrb	r3, [r7, #2]
 8000752:	2b39      	cmp	r3, #57	@ 0x39
 8000754:	d103      	bne.n	800075e <main+0x20a>
                GPIOH->BSRR = LED_GREEN_RESET;
 8000756:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <main+0x258>)
 8000758:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800075c:	619a      	str	r2, [r3, #24]
            //      GPIOH->BSRR = LED_GREEN_SET;
            // } else {
            //      GPIOH->BSRR = LED_GREEN_RESET;
            // }

            GPIOH->BSRR = LED_RED_SET;
 800075e:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <main+0x258>)
 8000760:	2240      	movs	r2, #64	@ 0x40
 8000762:	619a      	str	r2, [r3, #24]

            for (int i = 0; i < 300000; i++);
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	@ 0x24
 8000768:	e002      	b.n	8000770 <main+0x21c>
 800076a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800076c:	3301      	adds	r3, #1
 800076e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000772:	4a10      	ldr	r2, [pc, #64]	@ (80007b4 <main+0x260>)
 8000774:	4293      	cmp	r3, r2
 8000776:	ddf8      	ble.n	800076a <main+0x216>

            GPIOH->BSRR = LED_RED_RESET;
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <main+0x258>)
 800077a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800077e:	619a      	str	r2, [r3, #24]

            for (int i = 0; i < 300000; i++);
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
 8000784:	e002      	b.n	800078c <main+0x238>
 8000786:	6a3b      	ldr	r3, [r7, #32]
 8000788:	3301      	adds	r3, #1
 800078a:	623b      	str	r3, [r7, #32]
 800078c:	6a3b      	ldr	r3, [r7, #32]
 800078e:	4a09      	ldr	r2, [pc, #36]	@ (80007b4 <main+0x260>)
 8000790:	4293      	cmp	r3, r2
 8000792:	ddf8      	ble.n	8000786 <main+0x232>
            BSP_RTC_GetTime(&now);
 8000794:	e7b4      	b.n	8000700 <main+0x1ac>
 8000796:	bf00      	nop
 8000798:	2000001c 	.word	0x2000001c
 800079c:	20000012 	.word	0x20000012
 80007a0:	deadbeef 	.word	0xdeadbeef
 80007a4:	fffffc00 	.word	0xfffffc00
 80007a8:	46020c00 	.word	0x46020c00
 80007ac:	42021c00 	.word	0x42021c00
 80007b0:	42020800 	.word	0x42020800
 80007b4:	000493df 	.word	0x000493df

080007b8 <byte2bcd>:

// a static function can be defined as one that has its scope limited to the file in which it is declared
static uint8_t byte2bcd(uint8_t byte);
static uint8_t bcd2byte(uint8_t bcd);

static uint8_t byte2bcd(uint8_t byte) {
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
    uint8_t bcdhigh = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	73fb      	strb	r3, [r7, #15]
    while (byte >= 10) {
 80007c6:	e005      	b.n	80007d4 <byte2bcd+0x1c>
        bcdhigh++;
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	3301      	adds	r3, #1
 80007cc:	73fb      	strb	r3, [r7, #15]
        byte -= 10;
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	3b0a      	subs	r3, #10
 80007d2:	71fb      	strb	r3, [r7, #7]
    while (byte >= 10) {
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	2b09      	cmp	r3, #9
 80007d8:	d8f6      	bhi.n	80007c8 <byte2bcd+0x10>
    }
    return ((uint8_t) (bcdhigh << 4) | byte);
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	011b      	lsls	r3, r3, #4
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b2db      	uxtb	r3, r3
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <bcd2byte>:

static uint8_t bcd2byte(uint8_t bcd) {
 80007f2:	b480      	push	{r7}
 80007f4:	b085      	sub	sp, #20
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	4603      	mov	r3, r0
 80007fa:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	73fb      	strb	r3, [r7, #15]
    tmp = ((uint8_t) (bcd & (uint8_t) 0xF0) >> (uint8_t) 0x4) * 10;
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	091b      	lsrs	r3, r3, #4
 8000804:	b2db      	uxtb	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	0092      	lsls	r2, r2, #2
 800080a:	4413      	add	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	73fb      	strb	r3, [r7, #15]
    return (tmp + (bcd & (uint8_t) 0x0F));
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	f003 030f 	and.w	r3, r3, #15
 8000816:	b2da      	uxtb	r2, r3
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	4413      	add	r3, r2
 800081c:	b2db      	uxtb	r3, r3
}
 800081e:	4618      	mov	r0, r3
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
	...

0800082c <BSP_RTC_SetTime>:
     RCC->APB1ENR1 &= ~RCC_APB1ENR1_PWREN;
     */
}

// Set RTC prescalers and time
void BSP_RTC_SetTime(time_t *ptime) {
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
    uint32_t bcdtime;
    bcdtime = ((byte2bcd(ptime->hours)) << 16U)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ffbd 	bl	80007b8 <byte2bcd>
 800083e:	4603      	mov	r3, r0
 8000840:	041c      	lsls	r4, r3, #16
            | ((byte2bcd(ptime->minutes)) << 8U)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	785b      	ldrb	r3, [r3, #1]
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ffb6 	bl	80007b8 <byte2bcd>
 800084c:	4603      	mov	r3, r0
 800084e:	021b      	lsls	r3, r3, #8
 8000850:	431c      	orrs	r4, r3
            | ((byte2bcd(ptime->seconds)) << 0U);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	789b      	ldrb	r3, [r3, #2]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ffae 	bl	80007b8 <byte2bcd>
 800085c:	4603      	mov	r3, r0
 800085e:	4323      	orrs	r3, r4
    bcdtime = ((byte2bcd(ptime->hours)) << 16U)
 8000860:	60fb      	str	r3, [r7, #12]
    // Enable write access for RTC registers at the RTC write protection register
    // The following steps are required to unlock the write protection on all the RTC registers
    // except for RTC_TAMPCR, RTC_BKPxR, RTC_OR and RTC_ISR[31:8].
    // 1. Write ‘0xCA’ into the RTC_WPR register.
    // 2. Write ‘0x53’ into the RTC_WPR register.
    RTC->WPR = 0xCA;
 8000862:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <BSP_RTC_SetTime+0x88>)
 8000864:	22ca      	movs	r2, #202	@ 0xca
 8000866:	625a      	str	r2, [r3, #36]	@ 0x24
    RTC->WPR = 0x53;
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <BSP_RTC_SetTime+0x88>)
 800086a:	2253      	movs	r2, #83	@ 0x53
 800086c:	625a      	str	r2, [r3, #36]	@ 0x24

    // Enter init at the RTC initialization and status register
    // 1: Initialization mode used to program time and date register (RTC_TR and RTC_DR), and
    // prescaler register (RTC_PRER). Counters are stopped and start counting from the new
    // value when INIT is reset
    RTC->ICSR |= RTC_ICSR_INIT;
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <BSP_RTC_SetTime+0x88>)
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	4a10      	ldr	r2, [pc, #64]	@ (80008b4 <BSP_RTC_SetTime+0x88>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000878:	60d3      	str	r3, [r2, #12]
    while ((RTC->ICSR & RTC_ICSR_INITF) != RTC_ICSR_INITF);
 800087a:	bf00      	nop
 800087c:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <BSP_RTC_SetTime+0x88>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000884:	2b40      	cmp	r3, #64	@ 0x40
 8000886:	d1f9      	bne.n	800087c <BSP_RTC_SetTime+0x50>
    // to a high value to minimize consumption.
    // The asynchronous prescaler division factor is set to 128, and the synchronous division
    // factor to 256, to obtain an internal clock frequency of 1Hz (ck_spre) with an LSE frequency
    // of 32.768 kHz
    // Here the prescalers are set to 7F (128) * FF (256) = 32.768 for a 32.768 / 32.768 = 1 sec tick
    RTC->PRER = 0x007F00FF;
 8000888:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <BSP_RTC_SetTime+0x88>)
 800088a:	4a0b      	ldr	r2, [pc, #44]	@ (80008b8 <BSP_RTC_SetTime+0x8c>)
 800088c:	611a      	str	r2, [r3, #16]

    // Set time
    RTC->TR = bcdtime;
 800088e:	4a09      	ldr	r2, [pc, #36]	@ (80008b4 <BSP_RTC_SetTime+0x88>)
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	6013      	str	r3, [r2, #0]

    // Exit init
    RTC->ICSR &= ~RTC_ICSR_INIT;
 8000894:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <BSP_RTC_SetTime+0x88>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	4a06      	ldr	r2, [pc, #24]	@ (80008b4 <BSP_RTC_SetTime+0x88>)
 800089a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800089e:	60d3      	str	r3, [r2, #12]

    // Disable write access for RTC registers
    RTC->WPR = 0xFE;
 80008a0:	4b04      	ldr	r3, [pc, #16]	@ (80008b4 <BSP_RTC_SetTime+0x88>)
 80008a2:	22fe      	movs	r2, #254	@ 0xfe
 80008a4:	625a      	str	r2, [r3, #36]	@ 0x24
    RTC->WPR = 0x64;
 80008a6:	4b03      	ldr	r3, [pc, #12]	@ (80008b4 <BSP_RTC_SetTime+0x88>)
 80008a8:	2264      	movs	r2, #100	@ 0x64
 80008aa:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd90      	pop	{r4, r7, pc}
 80008b4:	46007800 	.word	0x46007800
 80008b8:	007f00ff 	.word	0x007f00ff

080008bc <BSP_RTC_GetTime>:

void BSP_RTC_GetTime(time_t *ptime) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
    ptime->hours = bcd2byte(
            (RTC->TR & (RTC_TR_HT_Msk | RTC_TR_HU_Msk)) >> RTC_TR_HU_Pos);
 80008c4:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <BSP_RTC_GetTime+0x64>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	0c1b      	lsrs	r3, r3, #16
    ptime->hours = bcd2byte(
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff ff8d 	bl	80007f2 <bcd2byte>
 80008d8:	4603      	mov	r3, r0
 80008da:	461a      	mov	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	701a      	strb	r2, [r3, #0]
    ptime->minutes = bcd2byte(
            (RTC->TR & (RTC_TR_MNT_Msk | RTC_TR_MNU_Msk)) >> RTC_TR_MNU_Pos);
 80008e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <BSP_RTC_GetTime+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	0a1b      	lsrs	r3, r3, #8
    ptime->minutes = bcd2byte(
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff7f 	bl	80007f2 <bcd2byte>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461a      	mov	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	705a      	strb	r2, [r3, #1]
    ptime->seconds = bcd2byte(
            (RTC->TR & (RTC_TR_ST_Msk | RTC_TR_SU_Msk)) >> RTC_TR_SU_Pos);
 80008fc:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <BSP_RTC_GetTime+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
    ptime->seconds = bcd2byte(
 8000900:	b2db      	uxtb	r3, r3
 8000902:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000906:	b2db      	uxtb	r3, r3
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff72 	bl	80007f2 <bcd2byte>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	709a      	strb	r2, [r3, #2]
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	46007800 	.word	0x46007800

08000924 <Configure_RTC>:
#define RTC_WRITE_PROTECTION_DISABLE  (uint8_t)0xFF
#define RTC_WRITE_PROTECTION_ENABLE_1 (uint8_t)0xCA
#define RTC_WRITE_PROTECTION_ENABLE_2 (uint8_t)0x53

void Configure_RTC(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
    // Enable the PWR clock in AHB3ENR
    __IO uint32_t tmpreg;
    RCC->AHB3ENR |= (RCC_AHB3ENR_PWREN);
 800092a:	4b5c      	ldr	r3, [pc, #368]	@ (8000a9c <Configure_RTC+0x178>)
 800092c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000930:	4a5a      	ldr	r2, [pc, #360]	@ (8000a9c <Configure_RTC+0x178>)
 8000932:	f043 0304 	orr.w	r3, r3, #4
 8000936:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    tmpreg = (RCC->AHB3ENR & RCC_AHB3ENR_PWREN);
 800093a:	4b58      	ldr	r3, [pc, #352]	@ (8000a9c <Configure_RTC+0x178>)
 800093c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000940:	f003 0304 	and.w	r3, r3, #4
 8000944:	607b      	str	r3, [r7, #4]
    (void) tmpreg;
 8000946:	687b      	ldr	r3, [r7, #4]

    // Disable backup domain write protection to enable write access to configure
    // the RTC clock source (to be done once after reset)
    PWR->DBPR |= (PWR_DBPR_DBP);
 8000948:	4b55      	ldr	r3, [pc, #340]	@ (8000aa0 <Configure_RTC+0x17c>)
 800094a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800094c:	4a54      	ldr	r2, [pc, #336]	@ (8000aa0 <Configure_RTC+0x17c>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6293      	str	r3, [r2, #40]	@ 0x28

    // 1: Reset the entire backup domain
    RCC->BDCR |= (RCC_BDCR_BDRST);
 8000954:	4b51      	ldr	r3, [pc, #324]	@ (8000a9c <Configure_RTC+0x178>)
 8000956:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800095a:	4a50      	ldr	r2, [pc, #320]	@ (8000a9c <Configure_RTC+0x178>)
 800095c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000960:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    // De-activate the above reset
    RCC->BDCR &= ~(RCC_BDCR_BDRST);
 8000964:	4b4d      	ldr	r3, [pc, #308]	@ (8000a9c <Configure_RTC+0x178>)
 8000966:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800096a:	4a4c      	ldr	r2, [pc, #304]	@ (8000a9c <Configure_RTC+0x178>)
 800096c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000970:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    // LSI oscillator enable
    // 1: LSI oscillator ON
    RCC->BDCR |= (RCC_BDCR_LSION);
 8000974:	4b49      	ldr	r3, [pc, #292]	@ (8000a9c <Configure_RTC+0x178>)
 8000976:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800097a:	4a48      	ldr	r2, [pc, #288]	@ (8000a9c <Configure_RTC+0x178>)
 800097c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000980:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    // 1: LSI oscillator ready
    while ((RCC->BDCR & RCC_BDCR_LSIRDY) != RCC_BDCR_LSIRDY) {}
 8000984:	bf00      	nop
 8000986:	4b45      	ldr	r3, [pc, #276]	@ (8000a9c <Configure_RTC+0x178>)
 8000988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800098c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000990:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000994:	d1f7      	bne.n	8000986 <Configure_RTC+0x62>

    // 00: No clock selected
    // 01: LSE oscillator clock selected
    // 10: LSI oscillator clock selected
    // 11: HSE oscillator clock divided by 32 selected
    RCC->BDCR &= ~(RCC_BDCR_RTCSEL);
 8000996:	4b41      	ldr	r3, [pc, #260]	@ (8000a9c <Configure_RTC+0x178>)
 8000998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800099c:	4a3f      	ldr	r2, [pc, #252]	@ (8000a9c <Configure_RTC+0x178>)
 800099e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80009a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    RCC->BDCR |= (RCC_BDCR_RTCSEL_1);
 80009a6:	4b3d      	ldr	r3, [pc, #244]	@ (8000a9c <Configure_RTC+0x178>)
 80009a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80009ac:	4a3b      	ldr	r2, [pc, #236]	@ (8000a9c <Configure_RTC+0x178>)
 80009ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    // RTC and TAMP clock enable
    // 1: RTC and TAMP clock enabled
    RCC->BDCR |= (RCC_BDCR_RTCEN);
 80009b6:	4b39      	ldr	r3, [pc, #228]	@ (8000a9c <Configure_RTC+0x178>)
 80009b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80009bc:	4a37      	ldr	r2, [pc, #220]	@ (8000a9c <Configure_RTC+0x178>)
 80009be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    // Enable RTC APB clock
    RCC->APB3ENR |= (RCC_APB3ENR_RTCAPBEN);
 80009c6:	4b35      	ldr	r3, [pc, #212]	@ (8000a9c <Configure_RTC+0x178>)
 80009c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80009cc:	4a33      	ldr	r2, [pc, #204]	@ (8000a9c <Configure_RTC+0x178>)
 80009ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009d2:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    /* Delay after an RCC peripheral clock enabling */
    tmpreg = (RCC->APB3ENR & RCC_APB3ENR_RTCAPBEN);
 80009d6:	4b31      	ldr	r3, [pc, #196]	@ (8000a9c <Configure_RTC+0x178>)
 80009d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80009dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009e0:	607b      	str	r3, [r7, #4]
    (void) tmpreg;
 80009e2:	687b      	ldr	r3, [r7, #4]

    RTC->WPR = RTC_WRITE_PROTECTION_ENABLE_1;
 80009e4:	4b2f      	ldr	r3, [pc, #188]	@ (8000aa4 <Configure_RTC+0x180>)
 80009e6:	22ca      	movs	r2, #202	@ 0xca
 80009e8:	625a      	str	r2, [r3, #36]	@ 0x24
    RTC->WPR = RTC_WRITE_PROTECTION_ENABLE_2;
 80009ea:	4b2e      	ldr	r3, [pc, #184]	@ (8000aa4 <Configure_RTC+0x180>)
 80009ec:	2253      	movs	r2, #83	@ 0x53
 80009ee:	625a      	str	r2, [r3, #36]	@ 0x24

    // Bit 6 FMT: Hour format
    // 0: 24 hour/day format
    // 1: AM/PM hour format
    RTC->CR &= ~(RTC_CR_FMT);
 80009f0:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa4 <Configure_RTC+0x180>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4a2b      	ldr	r2, [pc, #172]	@ (8000aa4 <Configure_RTC+0x180>)
 80009f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80009fa:	6193      	str	r3, [r2, #24]
    RTC->CR |= (RTC_CR_FMT);
 80009fc:	4b29      	ldr	r3, [pc, #164]	@ (8000aa4 <Configure_RTC+0x180>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a28      	ldr	r2, [pc, #160]	@ (8000aa4 <Configure_RTC+0x180>)
 8000a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a06:	6193      	str	r3, [r2, #24]
    #define RTC_ASYNCH_PREDIV          ((uint32_t)0x7F)
    // ck_spre=ck_apre/(SYNC prediv + 1) = 1 Hz
    #define RTC_SYNCH_PREDIV           ((uint32_t)0xF9)

    // ck_spre frequency = ck_apre frequency/(PREDIV_S+1)
    RTC->PRER &= ~(RTC_PRER_PREDIV_S);
 8000a08:	4b26      	ldr	r3, [pc, #152]	@ (8000aa4 <Configure_RTC+0x180>)
 8000a0a:	691b      	ldr	r3, [r3, #16]
 8000a0c:	4a25      	ldr	r2, [pc, #148]	@ (8000aa4 <Configure_RTC+0x180>)
 8000a0e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000a12:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000a16:	6113      	str	r3, [r2, #16]
    RTC->PRER |= (RTC_SYNCH_PREDIV);
 8000a18:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <Configure_RTC+0x180>)
 8000a1a:	691b      	ldr	r3, [r3, #16]
 8000a1c:	4a21      	ldr	r2, [pc, #132]	@ (8000aa4 <Configure_RTC+0x180>)
 8000a1e:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
 8000a22:	6113      	str	r3, [r2, #16]

    // ck_apre frequency = RTCCLK frequency/(PREDIV_A+1)
    RTC->PRER &= ~(RTC_PRER_PREDIV_A);
 8000a24:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <Configure_RTC+0x180>)
 8000a26:	691b      	ldr	r3, [r3, #16]
 8000a28:	4a1e      	ldr	r2, [pc, #120]	@ (8000aa4 <Configure_RTC+0x180>)
 8000a2a:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8000a2e:	6113      	str	r3, [r2, #16]
    RTC->PRER |= (RTC_ASYNCH_PREDIV);
 8000a30:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <Configure_RTC+0x180>)
 8000a32:	691b      	ldr	r3, [r3, #16]
 8000a34:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa4 <Configure_RTC+0x180>)
 8000a36:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8000a3a:	6113      	str	r3, [r2, #16]

    // If the RTC is not in an initialization mode...
    // 1: Calendar registers update is allowed
    if ((RTC->ICSR & RTC_ICSR_INITF) != RTC_ICSR_INITF) {
 8000a3c:	4b19      	ldr	r3, [pc, #100]	@ (8000aa4 <Configure_RTC+0x180>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a44:	2b40      	cmp	r3, #64	@ 0x40
 8000a46:	d00c      	beq.n	8000a62 <Configure_RTC+0x13e>
        // 1: Initialization mode used to program time and date register (RTC_TR and RTC_DR), and
        // prescaler register (RTC_PRER), plus BIN and BCDU fields. Counters are stopped and start
        // counting from the new value when INIT is reset
        RTC->ICSR |= (RTC_ICSR_INIT);
 8000a48:	4b16      	ldr	r3, [pc, #88]	@ (8000aa4 <Configure_RTC+0x180>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	4a15      	ldr	r2, [pc, #84]	@ (8000aa4 <Configure_RTC+0x180>)
 8000a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a52:	60d3      	str	r3, [r2, #12]

        while ((RTC->ICSR & RTC_ICSR_INITF) != RTC_ICSR_INITF) {
 8000a54:	bf00      	nop
 8000a56:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <Configure_RTC+0x180>)
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a5e:	2b40      	cmp	r3, #64	@ 0x40
 8000a60:	d1f9      	bne.n	8000a56 <Configure_RTC+0x132>
        }
    }

    // Exit Initialization mode
    RTC->ICSR &= ~(RTC_ICSR_INIT);
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <Configure_RTC+0x180>)
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa4 <Configure_RTC+0x180>)
 8000a68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000a6c:	60d3      	str	r3, [r2, #12]

    //Enable the write protection for RTC registers
    RTC->WPR = RTC_WRITE_PROTECTION_DISABLE;
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <Configure_RTC+0x180>)
 8000a70:	22ff      	movs	r2, #255	@ 0xff
 8000a72:	625a      	str	r2, [r3, #36]	@ 0x24

    #define RTC_WUT_TIME               ((uint32_t)47999)     /* 3 s */
    // If LSI is used as RTC clock source and RTC/2 clock is selected (prescaler = 2): auto-reload = (3u * (32000u / 2u)) - 1 = 47999.
    RTC->WUTR &= ~(RTC_WUTR_WUT);
 8000a74:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <Configure_RTC+0x180>)
 8000a76:	695b      	ldr	r3, [r3, #20]
 8000a78:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <Configure_RTC+0x180>)
 8000a7a:	0c1b      	lsrs	r3, r3, #16
 8000a7c:	041b      	lsls	r3, r3, #16
 8000a7e:	6153      	str	r3, [r2, #20]
    RTC->WUTR |= (uint32_t)(RTC_WUT_TIME | (RTC_WUT_TIME << RTC_WUTR_WUTOCLR_Pos));
 8000a80:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <Configure_RTC+0x180>)
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	4a07      	ldr	r2, [pc, #28]	@ (8000aa4 <Configure_RTC+0x180>)
 8000a86:	f043 23bb 	orr.w	r3, r3, #3137387264	@ 0xbb00bb00
 8000a8a:	f043 137f 	orr.w	r3, r3, #8323199	@ 0x7f007f
 8000a8e:	6153      	str	r3, [r2, #20]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	46020c00 	.word	0x46020c00
 8000aa0:	46020800 	.word	0x46020800
 8000aa4:	46007800 	.word	0x46007800

08000aa8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000aac:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <SystemInit+0x68>)
 8000aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ab2:	4a17      	ldr	r2, [pc, #92]	@ (8000b10 <SystemInit+0x68>)
 8000ab4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000abc:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <SystemInit+0x6c>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	@ (8000b14 <SystemInit+0x6c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <SystemInit+0x6c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000ace:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <SystemInit+0x6c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <SystemInit+0x6c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8000b14 <SystemInit+0x6c>)
 8000ada:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000ade:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000ae2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <SystemInit+0x6c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000aea:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <SystemInit+0x6c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a09      	ldr	r2, [pc, #36]	@ (8000b14 <SystemInit+0x6c>)
 8000af0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000af4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000af6:	4b07      	ldr	r3, [pc, #28]	@ (8000b14 <SystemInit+0x6c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000afc:	4b04      	ldr	r3, [pc, #16]	@ (8000b10 <SystemInit+0x68>)
 8000afe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b02:	609a      	str	r2, [r3, #8]
  #endif
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00
 8000b14:	46020c00 	.word	0x46020c00

08000b18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000b18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b50 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b1c:	f7ff ffc4 	bl	8000aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b20:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b22:	e003      	b.n	8000b2c <LoopCopyDataInit>

08000b24 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b24:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b26:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b28:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b2a:	3104      	adds	r1, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b2c:	480a      	ldr	r0, [pc, #40]	@ (8000b58 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b30:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b32:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b34:	d3f6      	bcc.n	8000b24 <CopyDataInit>
	ldr	r2, =_sbss
 8000b36:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b38:	e002      	b.n	8000b40 <LoopFillZerobss>

08000b3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b3a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b3c:	f842 3b04 	str.w	r3, [r2], #4

08000b40 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b40:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <LoopForever+0x16>)
	cmp	r2, r3
 8000b42:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b44:	d3f9      	bcc.n	8000b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b46:	f000 f811 	bl	8000b6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b4a:	f7ff fd03 	bl	8000554 <main>

08000b4e <LoopForever>:

LoopForever:
    b LoopForever
 8000b4e:	e7fe      	b.n	8000b4e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000b50:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000b54:	08000bd4 	.word	0x08000bd4
	ldr	r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b5c:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8000b60:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8000b64:	20000020 	.word	0x20000020

08000b68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC1_IRQHandler>
	...

08000b6c <__libc_init_array>:
 8000b6c:	b570      	push	{r4, r5, r6, lr}
 8000b6e:	4d0d      	ldr	r5, [pc, #52]	@ (8000ba4 <__libc_init_array+0x38>)
 8000b70:	2600      	movs	r6, #0
 8000b72:	4c0d      	ldr	r4, [pc, #52]	@ (8000ba8 <__libc_init_array+0x3c>)
 8000b74:	1b64      	subs	r4, r4, r5
 8000b76:	10a4      	asrs	r4, r4, #2
 8000b78:	42a6      	cmp	r6, r4
 8000b7a:	d109      	bne.n	8000b90 <__libc_init_array+0x24>
 8000b7c:	4d0b      	ldr	r5, [pc, #44]	@ (8000bac <__libc_init_array+0x40>)
 8000b7e:	2600      	movs	r6, #0
 8000b80:	4c0b      	ldr	r4, [pc, #44]	@ (8000bb0 <__libc_init_array+0x44>)
 8000b82:	f000 f817 	bl	8000bb4 <_init>
 8000b86:	1b64      	subs	r4, r4, r5
 8000b88:	10a4      	asrs	r4, r4, #2
 8000b8a:	42a6      	cmp	r6, r4
 8000b8c:	d105      	bne.n	8000b9a <__libc_init_array+0x2e>
 8000b8e:	bd70      	pop	{r4, r5, r6, pc}
 8000b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b94:	3601      	adds	r6, #1
 8000b96:	4798      	blx	r3
 8000b98:	e7ee      	b.n	8000b78 <__libc_init_array+0xc>
 8000b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b9e:	3601      	adds	r6, #1
 8000ba0:	4798      	blx	r3
 8000ba2:	e7f2      	b.n	8000b8a <__libc_init_array+0x1e>
 8000ba4:	08000bcc 	.word	0x08000bcc
 8000ba8:	08000bcc 	.word	0x08000bcc
 8000bac:	08000bcc 	.word	0x08000bcc
 8000bb0:	08000bd0 	.word	0x08000bd0

08000bb4 <_init>:
 8000bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bb6:	bf00      	nop
 8000bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bba:	bc08      	pop	{r3}
 8000bbc:	469e      	mov	lr, r3
 8000bbe:	4770      	bx	lr

08000bc0 <_fini>:
 8000bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc2:	bf00      	nop
 8000bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bc6:	bc08      	pop	{r3}
 8000bc8:	469e      	mov	lr, r3
 8000bca:	4770      	bx	lr
